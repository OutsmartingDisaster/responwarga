'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { createClient } from '@/lib/supabase/client';
import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';
import { nanoid } from 'nanoid';
import * as XLSX from 'xlsx';
import { toast } from 'react-hot-toast';

interface EmergencyReport {
  id: number;
  full_name: string;
  phone_number: string;
  email: string;
  address: string;
  description: string;
  assistance_type: string;
  latitude: number;
  longitude: number;
  status: string;
  created_at: string;
}

interface Contribution {
  id: number;
  full_name: string;
  phone_number: string;
  email: string;
  address: string;
  description: string;
  contribution_type: string;
  capacity: string | null;
  facilities: Record<string, boolean> | null;
  quantity: string | null;
  unit: string | null;
  latitude: number;
  longitude: number;
  status: string;
  created_at: string;
  show_contact_info: boolean;
}

interface SharedLink {
  id: string;
  share_id: string;
  type: 'emergency' | 'contribution';
  title: string;
  created_at: string;
  expires_at: string | null;
}

export default function SpreadsheetManager() {
  const supabase = createClient();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [sharedLinks, setSharedLinks] = useState<SharedLink[]>([]);
  const [showShareModal, setShowShareModal] = useState(false);
  const [shareType, setShareType] = useState<'emergency' | 'contribution' | null>(null);
  const [shareTitle, setShareTitle] = useState('');
  const [expiryDays, setExpiryDays] = useState('7');
  const [emergencyData, setEmergencyData] = useState<any[]>([]);

  // Fetch shared links on mount
  useEffect(() => {
    fetchSharedLinks();
  }, []);

  const fetchSharedLinks = async () => {
    try {
      const { data, error } = await supabase
        .from('shared_reports')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setSharedLinks(data || []);
    } catch (err: any) {
      console.error('Error fetching shared links:', err);
      setError(err.message);
    }
  };

  const generateShareableLink = async () => {
    if (!shareType || !shareTitle) return;

    try {
      setLoading(true);
      setError(null);

      const shareId = nanoid(10);
      const expiresAt = expiryDays === 'never' 
        ? null 
        : new Date(Date.now() + parseInt(expiryDays) * 24 * 60 * 60 * 1000).toISOString();

      const { data, error } = await supabase
        .from('shared_reports')
        .insert({
          share_id: shareId,
          type: shareType,
          title: shareTitle,
          expires_at: expiresAt
        })
        .select()
        .single();

      if (error) throw error;

      setSharedLinks(prev => [data, ...prev]);
      setShowShareModal(false);
      setShareType(null);
      setShareTitle('');
      setExpiryDays('7');
    } catch (err: any) {
      console.error('Error generating shareable link:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const deleteSharedLink = async (id: string) => {
      try {
        const { error } = await supabase
        .from('shared_reports')
        .delete()
        .eq('id', id);

        if (error) throw error;
      setSharedLinks(prev => prev.filter(link => link.id !== id));
      } catch (err: any) {
      console.error('Error deleting shared link:', err);
        setError(err.message);
    }
  };

  const generateSpreadsheet = async (type: 'emergency' | 'contribution') => {
    try {
      setLoading(true);
      setError(null);

      // Get current user's profile
      const { data: { user } } = await supabase.auth.getUser();
      const { data: profile } = await supabase
        .from('profiles')
        .select('name, organization')
        .eq('id', user?.id)
        .single();

      // Fetch data
      const { data, error } = await supabase
        .from(type === 'emergency' ? 'emergency_reports' : 'contributions')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;

      // Create workbook
      const workbook = new ExcelJS.Workbook();
      workbook.creator = 'Respon Warga';
      workbook.lastModifiedBy = profile?.name || 'Unknown';
      workbook.created = new Date();
      workbook.modified = new Date();

      // Add worksheet
      const worksheet = workbook.addWorksheet(type === 'emergency' ? 'Emergency Reports' : 'Contributions');

      // Add header with attribution
      worksheet.mergeCells('A1:D1');
      const headerCell = worksheet.getCell('A1');
      headerCell.value = `Generated by Respon Warga Â· Shared by ${profile?.name || 'Unknown'} (${profile?.organization || 'Unknown'})`;
      headerCell.font = { size: 12, color: { argb: '71717A' } };
      headerCell.alignment = { vertical: 'middle', horizontal: 'left' };

      // Add timestamp
      worksheet.mergeCells('A2:D2');
      const timestampCell = worksheet.getCell('A2');
      timestampCell.value = `Generated on ${new Date().toLocaleString()}`;
      timestampCell.font = { size: 12, color: { argb: '71717A' } };
      timestampCell.alignment = { vertical: 'middle', horizontal: 'left' };

      // Set columns based on type
      if (type === 'emergency') {
        worksheet.columns = [
          { header: 'ID', key: 'id', width: 10 },
          { header: 'Full Name', key: 'full_name', width: 20 },
          { header: 'Phone Number', key: 'phone_number', width: 15 },
          { header: 'Email', key: 'email', width: 25 },
          { header: 'Address', key: 'address', width: 30 },
          { header: 'Description', key: 'description', width: 40 },
          { header: 'Assistance Type', key: 'assistance_type', width: 15 },
          { header: 'Status', key: 'status', width: 15 },
          { header: 'Latitude', key: 'latitude', width: 12 },
          { header: 'Longitude', key: 'longitude', width: 12 },
          { header: 'Photo URL', key: 'photo_url', width: 30 },
          { header: 'Created At', key: 'created_at', width: 20 }
        ];

        // Add data
        data?.forEach((report: EmergencyReport) => {
          worksheet.addRow({
            ...report,
            created_at: new Date(report.created_at).toLocaleString()
          });
        });
      } else {
        worksheet.columns = [
          { header: 'ID', key: 'id', width: 10 },
          { header: 'Full Name', key: 'full_name', width: 20 },
          { header: 'Phone Number', key: 'phone_number', width: 15 },
          { header: 'Email', key: 'email', width: 25 },
          { header: 'Address', key: 'address', width: 30 },
          { header: 'Description', key: 'description', width: 40 },
          { header: 'Contribution Type', key: 'contribution_type', width: 15 },
          { header: 'Capacity', key: 'capacity', width: 10 },
          { header: 'Facilities', key: 'facilities', width: 30 },
          { header: 'Quantity', key: 'quantity', width: 10 },
          { header: 'Unit', key: 'unit', width: 10 },
          { header: 'Status', key: 'status', width: 15 },
          { header: 'Latitude', key: 'latitude', width: 12 },
          { header: 'Longitude', key: 'longitude', width: 12 },
          { header: 'Photo URL', key: 'photo_url', width: 30 },
          { header: 'Show Contact Info', key: 'show_contact_info', width: 15 },
          { header: 'Created At', key: 'created_at', width: 20 }
        ];

        // Add data
        data?.forEach((contribution: Contribution) => {
          worksheet.addRow({
            ...contribution,
            facilities: contribution.facilities ? JSON.stringify(contribution.facilities) : '',
            created_at: new Date(contribution.created_at).toLocaleString()
          });
        });
      }

      // Generate buffer
      const buffer = await workbook.xlsx.writeBuffer();

      // Save file
      const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      saveAs(blob, `respon-warga-${type}-${new Date().toISOString().split('T')[0]}.xlsx`);

      setLoading(false);
    } catch (err: any) {
      console.error('Error generating spreadsheet:', err);
      setError(err.message);
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Emergency Reports Card */}
        <div className="bg-zinc-800/50 rounded-lg p-4 md:p-6">
          <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4">
            <div>
              <h3 className="text-lg font-semibold text-white">Emergency Reports</h3>
              <p className="mt-1 text-sm text-zinc-400">Download or share emergency reports</p>
            </div>
            <div className="flex flex-col sm:flex-row gap-2 w-full md:w-auto">
              <button
                onClick={() => {
                  setShareType('emergency');
                  setShareTitle('Emergency Reports');
                  setShowShareModal(true);
                }}
                className="w-full md:w-auto px-4 py-2 bg-zinc-700 text-white rounded-lg hover:bg-zinc-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-zinc-800"
              >
                Share
              </button>
              <button
                onClick={() => generateSpreadsheet('emergency')}
                disabled={loading}
                className="w-full md:w-auto px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-zinc-800 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                {loading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-2 border-white/20 border-t-white"></div>
                    <span>Generating...</span>
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                    </svg>
                    <span>Download</span>
                  </>
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Contributions Card */}
        <div className="bg-zinc-800/50 rounded-lg p-4 md:p-6">
          <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4">
            <div>
              <h3 className="text-lg font-semibold text-white">Contributions</h3>
              <p className="mt-1 text-sm text-zinc-400">Download or share contributions</p>
            </div>
            <div className="flex flex-col sm:flex-row gap-2 w-full md:w-auto">
              <button
                onClick={() => {
                  setShareType('contribution');
                  setShareTitle('Contributions');
                  setShowShareModal(true);
                }}
                className="w-full md:w-auto px-4 py-2 bg-zinc-700 text-white rounded-lg hover:bg-zinc-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-zinc-800"
              >
                Share
              </button>
              <button
                onClick={() => generateSpreadsheet('contribution')}
                disabled={loading}
                className="w-full md:w-auto px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-zinc-800 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                {loading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-2 border-white/20 border-t-white"></div>
                    <span>Generating...</span>
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                    </svg>
                    <span>Download</span>
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Shared Links Table */}
      {sharedLinks.length > 0 && (
        <div className="bg-zinc-800/50 rounded-lg overflow-hidden">
          <div className="p-4 border-b border-zinc-700">
            <h3 className="text-lg font-semibold text-white">Shared Links</h3>
          </div>
          <div className="overflow-x-auto">
            <div className="inline-block min-w-full align-middle">
              <table className="min-w-full divide-y divide-zinc-700">
                <thead className="bg-zinc-700">
                  <tr>
                    <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase">Title</th>
                    <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase">Type</th>
                    <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase">Link</th>
                    <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase">Created</th>
                    <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase">Expires</th>
                    <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase">Actions</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-zinc-700">
                  {sharedLinks.map((link) => (
                    <tr key={link.id} className="hover:bg-zinc-700/50">
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-zinc-300">{link.title}</td>
                      <td className="px-4 py-3 whitespace-nowrap">
                        <span className={`px-2 py-1 rounded text-xs font-medium ${
                          link.type === 'emergency' ? 'bg-red-900/50 text-red-200' : 'bg-blue-900/50 text-blue-200'
                        }`}>
                          {link.type}
                        </span>
                      </td>
                      <td className="px-4 py-3">
                        <div className="flex items-center gap-2">
                          <input
                            type="text"
                            value={`${window.location.origin}/share/${link.share_id}`}
                            readOnly
                            className="bg-zinc-700 border border-zinc-600 rounded px-2 py-1 text-sm w-full md:w-64 text-zinc-300"
                          />
                          <button
                            onClick={() => {
                              navigator.clipboard.writeText(`${window.location.origin}/share/${link.share_id}`);
                            }}
                            className="text-blue-400 hover:text-blue-300 flex-shrink-0"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                            </svg>
                          </button>
                        </div>
                      </td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-zinc-300">
                        {new Date(link.created_at).toLocaleDateString()}
                      </td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-zinc-300">
                        {link.expires_at ? new Date(link.expires_at).toLocaleDateString() : 'Never'}
                      </td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm">
                        <button
                          onClick={() => deleteSharedLink(link.id)}
                          className="text-red-500 hover:text-red-400"
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      )}

      {error && (
        <div className="p-4 bg-red-900/50 border border-red-700 rounded text-white">
          {error}
        </div>
      )}

      {/* Share Modal */}
      {showShareModal && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center p-4 z-50">
          <div className="bg-zinc-800 rounded-lg shadow-xl max-w-md w-full">
            <div className="p-6">
              <h3 className="text-lg font-semibold text-white mb-4">Create Shareable Link</h3>
              <div className="space-y-4">
                <div>
                  <label htmlFor="title" className="block text-sm font-medium text-zinc-300">
                    Title
                  </label>
                  <input
                    type="text"
                    id="title"
                    value={shareTitle}
                    onChange={(e) => setShareTitle(e.target.value)}
                    className="mt-1 block w-full rounded-md bg-zinc-700 border-zinc-600 text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label htmlFor="expiry" className="block text-sm font-medium text-zinc-300">
                    Expires After
                  </label>
                  <select
                    id="expiry"
                    value={expiryDays}
                    onChange={(e) => setExpiryDays(e.target.value)}
                    className="mt-1 block w-full rounded-md bg-zinc-700 border-zinc-600 text-white shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  >
                    <option value="1">1 day</option>
                    <option value="7">7 days</option>
                    <option value="30">30 days</option>
                    <option value="never">Never</option>
                  </select>
                </div>
              </div>
              <div className="mt-6 flex flex-col sm:flex-row justify-end gap-3">
          <button
                  onClick={() => setShowShareModal(false)}
                  className="w-full sm:w-auto px-4 py-2 bg-zinc-700 text-white rounded-lg hover:bg-zinc-600"
                >
                  Cancel
          </button>
          <button
                  onClick={generateShareableLink}
                  disabled={!shareTitle || loading}
                  className="w-full sm:w-auto px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Create Link
          </button>
              </div>
            </div>
      </div>
      </div>
      )}
    </div>
  );
}